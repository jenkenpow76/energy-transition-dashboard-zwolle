// Interactive Energy Policy Model - With Stakeholder Controls
model energy_policy_model

global {
    // Load shapefiles
    file shape_file_buildings <- file("../data/building.shp");
    file shape_file_roads <- file("../data/road.shp");
    file shape_file_bounds <- file("../data/bounds.shp");
    geometry shape <- envelope(shape_file_bounds);

    // Policy and simulation controls
    bool subsidy_available <- true;
    float subsidy_rate <- 0.5;                // Adjustable via GUI
    int subsidy_end_year <- 2050;             // Year to stop subsidies
    float total_energy <- 0.0;
    float step <- 1 #day;
    int current_year <- 2025;

    init {
        // Create buildings from shapefile
        create building from: shape_file_buildings with: [
            type::string(read("NATURE"))
        ] {
            energy_consumption <- 1000 + rnd(500);
            decision_probability <- 0.3;

            // Color by type
            if type = "Industrial" {
                my_color <- #red;
            } else {
                my_color <- #gray;
            }
        }

        // Create roads
        create road from: shape_file_roads;
    }

    // Yearly policy logic
    reflex simulate_policy {
        if (cycle mod 365 = 0) {
            current_year <- current_year + 1;

            // Automatically disable subsidies after cutoff year
            if current_year > subsidy_end_year {
                subsidy_available <- false;
            }

            ask building {
                // Only non-industrial, non-upgraded, subsidized buildings can upgrade
                if (!upgraded and subsidy_available and type != "Industrial") {
                    if (rnd(1.0) < decision_probability + subsidy_rate) {
                        upgraded <- true;
                        energy_consumption <- energy_consumption * 0.7;
                    }
                }

                // Color logic
                if upgraded {
                    my_color <- #green;
                } else {
                    if type = "Industrial" {
                        my_color <- #red;
                    } else {
                        my_color <- #gray;
                    }
                }
            }

            // Recalculate total energy
            total_energy <- sum(building collect each.energy_consumption);
        }
    }
}

species building {
    string type;
    float energy_consumption <- 1000.0;
    bool upgraded <- false;
    float decision_probability <- 0.3;
    rgb my_color;

    aspect base {
        draw shape color: my_color;
    }
}

species road {
    rgb color <- #black;

    aspect base {
        draw shape color: color;
    }
}

experiment energy_policy type: gui {
    // Stakeholder-adjustable parameters
    parameter "Subsidy Rate" var: subsidy_rate category: "Policy" min: 0.0 max: 1.0 step: 0.05;
    parameter "Subsidy Available?" var: subsidy_available category: "Policy";
    parameter "End Subsidy After Year" var: subsidy_end_year category: "Policy" min: 2025 max: 2050;

    parameter "Shapefile for the buildings:" var: shape_file_buildings category: "GIS";
    parameter "Shapefile for the roads:" var: shape_file_roads category: "GIS";
    parameter "Shapefile for the bounds:" var: shape_file_bounds category: "GIS";

    output {
        // Map view
        display map_display type: 3d {
            species building aspect: base;
            species road aspect: base;
        }

        // Energy over time chart
        display energy_chart {
            chart "Energy Use Over Time" type: series {
                data "Yearly Total Energy" value: total_energy;
            }
        }

        // Status monitors
        monitor "Total Energy Consumption" value: total_energy;
        monitor "Simulation Year" value: current_year;
        monitor "Subsidy Still Active?" value: subsidy_available;
    }
}
